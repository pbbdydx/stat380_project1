knitr::opts_chunk$set(echo = TRUE)
# import libraries
# remove(list = ls())
library(tidyverse)
library(readxl)
# read data
cod <- read_xlsx("c:/users/pb601/onedrive/desktop/stat_380/project1/CODGames2_mp.xlsx", sheet = 1)
View(cod)
str(cod$Choice)
sum(cod$Choice.isna())
str(cod$Choice)
sum(is.na(cod$Choice))
# Get variable type and number of unique values
str(cod$Choice)
sum(unique(cod$Choice))
# Get variable type and number of unique values
str(cod$Choice)
sum(distinct(cod$Choice))
# Get variable type and number of unique values
str(cod$Choice)
sum(distinct_all(cod$Choice))
cod$Choice <- as.factor(cod$Choice)
# get num missing values
sum(is.na(cod$Choice))
ggplot(data = cod, mapping = aes(x = Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip()
# Get variable type
str(cod$Choice)
cod$Choice <- as.factor(cod$Choice)
# get num missing values
sum(is.na(cod$Choice))
# import libraries
# remove(list = ls())
library(tidyverse)
library(readxl)
# read data
cod <- read_xlsx("c:/users/pb601/onedrive/desktop/stat_380/project1/CODGames2_mp.xlsx", sheet = 1)
# Get variable type
str(cod$Choice)
cod$Choice <- as.factor(cod$Choice)
# get num missing values
sum(is.na(cod$Choice))
# Get variable type
str(cod$Choice)
cod$Choice <- as.factor(cod$Choice)
# get num missing values
sum(is.na(cod$Choice))
# check that factor conversion worked
str(cod$Choice)
# import libraries
# remove(list = ls())
library(tidyverse)
library(readxl)
# read data
cod <- read_xlsx("c:/users/pb601/onedrive/desktop/stat_380/project1/CODGames2_mp.xlsx", sheet = 1)
# Get variable type
str(cod$Choice)
cod$Choice <- as.factor(cod$Choice)
# get num missing values
sum(is.na(cod$Choice))
# check that factor conversion worked
str(cod$Choice)
cod %>%
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
cod$Choice %>%
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
data.frame(cod$Choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
data.frame(cod$Choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot() +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
View(data.frame(cod$Choice))
data.frame(cod$Choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod.Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
data.frame(cod$Choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod.Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
geom_vline(x = mean(count(cod$Choice)))
data.frame(cod$Choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod.Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
geom_vline(x = mean(sum(cod$Choice)))
data.frame(cod$Choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod.Choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
head(cod)
sum(is.na(cod))
glimpse(cod)
cod_working <- cod %>%
rename_with(~ str_replace_all(.x, "([a-z])([A-Z])", "\\1_\\L\\2") %>%  #rename with fancy reges
str_replace_all("[^a-zA-Z0-9_]", "_") %>%
tolower())
cod_working <- cod_working
mutate(
)
View(cod_working)
glimpse(cod_working)
cod_working <- cod %>%
rename_with(~ str_replace_all(.x, "([a-z])([A-Z])", "\\1\\_\\2") %>%  #rename with fancy reges
str_replace_all("[^a-zA-Z0-9_]", "_") %>%
tolower())
cod_working <- cod_working
mutate(
)
glimpse(cod)
glimpse(cod_working)
View(cod)
unique(cod$XPType)
sum(is.na(plants, detonates,deposits))
sapply(cod_working, function(x) is.na(x))
cod %>% select(everything()) %>% summarize_all(fun(sum(is.na(.))))
cod %>% select(everything()) %>% summarize_all(funs(sum(is.na(.))))
apply(margin = 2, function(x) sum(is.na(x)))
apply(cod, margin = 2, FUN = function(x) sum(is.na(x)))
apply(cod, MAARGIN = 2, FUN = function(x) sum(is.na(x)))
apply(cod, MARGIN = 2, FUN = function(x) sum(is.na(x)))
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next commans
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xptype = if_else(xptype == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>% # split result column
separate_wider_delim(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge')
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next commans
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>% # split result column
separate_wider_delim(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge')
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next commans
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate_wider_delim(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge')
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next commans
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
)
# trying to split result column
# separate_wider_delim(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge')
sim(is.na(cod$choice))
sum(is.na(cod$choice))
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next commans
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
)
# trying to split result column
# separate_wider_delim(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge')
# drop columns with a lot of NA values
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x))) # counts total NA in columns
# since NA values are either < 50 or >200 drop all columns with more than 200 NA values
sum(is.na(cod$choice))
sum(is.na(cod_working$choice))
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = working_cod.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod_working.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice'
)
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod_working.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice',
caption = '* one dropped value'
)

map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate_wider_delim(result, into = c('team_result', 'other_team_result'), delim = '-', extra = 'merge')
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate(result, into = c('team_result', 'other_team_result'), delim = '-', extra = 'merge', convert = TRUE)
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge', convert = TRUE)
# drop columns with a lot of NA values
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x))) # counts total NA in columns
# since NA values are either < 50 or >200 drop all columns with more than 200 NA values
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge', convert = TRUE) %>%
select(where(~ sum(is.na(.))) <= 200)
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge', convert = TRUE)
# drop columns with a lot of NA values
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x))) # counts total NA in columns
# since NA values are either < 50 or >200 drop all columns with more than 200 NA values
cod_working <- cod_working %>%
select(where(~ is.na(.) <= 200))
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge', convert = TRUE)
# drop columns with a lot of NA values
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x))) # counts total NA in columns
# since NA values are either < 50 or >200 drop all columns with more than 200 NA values
cod_working <- cod_working %>%
select(where(~ sum(is.na(.)) <= 200))
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x)))
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge', convert = TRUE)
# drop columns with a lot of NA values
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x))) # counts total NA in columns
# since NA values are either < 50 or >200 drop all columns with more than 200 NA values
cod_working <- cod_working %>%
select(where(~ sum(is.na(.)) < 200))
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x)))
unique(cod_working$primary_weapon)
sum(is.na(cod_working$primary_weapon))
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod_working.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
coord_flip() +
labs(
y = 'Map Choice',
x = 'Count',
title = 'Bar Plot of Map Choice',
caption = '* one dropped value'
)
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod_working.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Map Choice',
y = 'Count',
title = 'Bar Plot of Map Choice',
caption = '* one dropped value'
) +
coord_flip()
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod_working.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Map Choice',
y = 'Games Played ',
title = 'Bar Plot of Map Choice and Games Played',
caption = '* one dropped value'
) +
coord_flip()
ggplot(data = cod_working, mapping = aes(x = primary_weapon)) +
geom_bar(fill = 'lightgreen', color = 'black')+
labs(
x = 'Primary Weapon Used',
y = 'Number of Games'
title = 'Counts for Primary Weapon'
ggplot(data = cod_working, mapping = aes(x = primary_weapon)) +
geom_bar(fill = 'lightgreen', color = 'black')+
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
)
ggplot(data = cod_working, mapping = aes(x = primary_weapon)) +
geom_bar(fill = 'lightgreen', color = 'black')+
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
)
library(forcats)
ggplot(data = cod_working, mapping = aes(x = fct_reorder(primary_weapon,primary_weapon, .fun = length))) +
geom_bar(fill = 'lightgreen', color = 'black')+
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
)
ggplot(data = cod_working, mapping = aes(x = fct_reorder(primary_weapon,primary_weapon, .fun = length))) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
)
cod_working <- cod %>%
rename(
map1 = Map1,
map2 = Map2,
choice = Choice,
map_vote = MapVote,
date = Date,
full_partial = FullPartial,
result = Result,
eliminations = Eliminations,
deaths = Deaths,
score = Score,
damage = Damage,
total_xp = TotalXP,
primary_weapon = PrimaryWeapon,
xp_multiplier = XPType, # call this multiplier, will convert in next command
did_player_vote = DidPlayerVote,
game_type = GameType,
confirms = Confirms,
denies = Denies,
objectives = Objectives,
objective_kills = ObjectiveKills,
captures = Captures,
diffuses = Diffuses,
plants = Plants,
detonates = Detonates,
deposits = Deposits,
time_sec = Time_Sec,
time_min = Time_Min
) %>%
mutate(  # for now, only mutating variables we think are important
map1 = as.factor(map1),
map2 = as.factor(map2),
choice = as.factor(choice),
full_partial = as.factor(full_partial),
primary_weapon = as.factor(primary_weapon),
xp_multiplier = if_else(xp_multiplier == '10% Boost', 1.10, 2.10),
did_player_vote = as.logical(if_else(did_player_vote == 'Yes',1,0)),
) %>%
separate(result, into = c('team_result', 'other_team_result'), sep = '-', extra = 'merge', convert = TRUE)
# figure out na values for each column
apply(cod_working, MARGIN = 2, FUN = function(x) sum(is.na(x))) # counts total NA in columns
# since NA values are either < 50 or >=200 drop all columns with more than 200 NA values
cod_working <- cod_working %>%
select(where(~ sum(is.na(.)) < 200))
ggplot(data = cod_working, mapping = aes(x = fct_reorder(primary_weapon,primary_weapon, .fun = length))) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
) + theme_classic()
ggplot(data = cod_working, mapping = aes(x = fct_reorder(primary_weapon,primary_weapon, .fun = length))) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
) + theme_bw()
data.frame(cod_working$choice) %>% # convert sngle col into dataframe
na.omit() %>% # makes sense to omit single observation in one variable
ggplot(aes(x = cod_working.choice)) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Map Choice',
y = 'Games Played ',
title = 'Bar Plot of Map Choice and Games Played',
caption = '* one dropped value'
) +
coord_flip() +
theme_bw()
ggplot(data = cod_working, mapping = aes(x = score)) +
geom_histogram(binwidth = 100, fill = 'lightgreen', color = 'black')+
labs(
x = 'Score',
y = 'Number of Games',
title = 'Call of Duty Score Distribution' )
ggplot(data = cod_working, mapping = aes(x = score)) +
geom_histogram(binwidth = 100, fill = 'lightgreen', color = 'black')+
labs(
x = 'Score',
y = 'Number of Games',
title = 'Call of Duty Score Distribution') +
theme_bw()
ggplot(data = cod_working, mapping = aes(x = fct_reorder(primary_weapon,primary_weapon, .fun = length))) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
) +
theme_classic()
ggplot(data = cod_working, mapping = aes(x = fct_reorder(primary_weapon,primary_weapon, .fun = length))) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
) +
theme_linedraw()
ggplot(data = cod_working, mapping = aes(x = fct_reorder(primary_weapon,primary_weapon, .fun = length))) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(
x = 'Primary Weapon Used',
y = 'Number of Games',
title = 'Counts for Primary Weapon'
) +
theme_bw()
ggplot(data = cod_working, mapping = aes(x = score)) +
geom_histogram(binwidth = 200, fill = 'lightgreen', color = 'black')+
labs(
x = 'Score',
y = 'Number of Games',
title = 'Call of Duty Score Distribution') +
theme_bw()
ggplot(data = cod_working, mapping = aes(x = score)) +
geom_histogram(binwidth = 250, fill = 'lightgreen', color = 'black')+
labs(
x = 'Score',
y = 'Number of Games',
title = 'Call of Duty Score Distribution') +
theme_bw()
cod_working %>%
seslect(score) %>%
summarize(min = min(score),
max = max(score),
mean = mean(score),
median = median(score),
std = sd(score))
cod_working %>%
select(score) %>%
summarize(min = min(score),
max = max(score),
mean = mean(score),
median = median(score),
std = sd(score)
)
ggplot(data = cod_working, mapping = aes(x = score)) +
geom_histogram(binwidth = 250, fill = 'lightgreen', color = 'black') +
labs(
x = 'Score',
y = 'Number of Games',
title = 'Call of Duty Score Distribution') +
theme_bw()
